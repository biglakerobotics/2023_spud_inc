// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorController;
import edu.wpi.first.wpilibj.motorcontrol.PWMTalonSRX;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private PWMTalonSRX motorControllerRight1;
private PWMTalonSRX motorControllerRight2;
private DifferentialDrive rightMotors;
private PWMTalonSRX motorControllerLeftBank1;
private PWMTalonSRX motorControllerLeftBank2;
private DifferentialDrive leftMotors;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
motorControllerRight1 = new PWMTalonSRX(0);
 addChild("Motor Controller Right  1",motorControllerRight1);
 motorControllerRight1.setInverted(false);

motorControllerRight2 = new PWMTalonSRX(1);
 addChild("Motor Controller Right 2",motorControllerRight2);
 motorControllerRight2.setInverted(false);

rightMotors = new DifferentialDrive(motorControllerRight1, motorControllerRight2);
 addChild("RightMotors",rightMotors);
 rightMotors.setSafetyEnabled(true);
rightMotors.setExpiration(0.1);
rightMotors.setMaxOutput(1.0);


motorControllerLeftBank1 = new PWMTalonSRX(2);
 addChild("Motor Controller Left Bank 1",motorControllerLeftBank1);
 motorControllerLeftBank1.setInverted(false);

motorControllerLeftBank2 = new PWMTalonSRX(3);
 addChild("Motor Controller Left Bank 2",motorControllerLeftBank2);
 motorControllerLeftBank2.setInverted(false);

leftMotors = new DifferentialDrive(motorControllerLeftBank1, motorControllerLeftBank2);
 addChild("LeftMotors",leftMotors);
 leftMotors.setSafetyEnabled(true);
leftMotors.setExpiration(0.1);
leftMotors.setMaxOutput(1.0);



        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

