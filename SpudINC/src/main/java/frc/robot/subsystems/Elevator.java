// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

import javax.swing.text.Position;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.LimitSwitchNormal;
import com.ctre.phoenix.motorcontrol.TalonFXControlMode;
import com.ctre.phoenix.motorcontrol.TalonFXSensorCollection;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.*;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.DigitalInput;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Elevator extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    private final WPI_TalonFX Front = new WPI_TalonFX(17);
    private final WPI_TalonFX Back = new WPI_TalonFX(18);
    public final DifferentialDrive dualDifferentialDrive = new DifferentialDrive(Front, Back);
    
    //- BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private DigitalInput frontBottomLimiter;
private DigitalInput backBottomLimiter;
private DigitalInput frontMiddleLimiter;
private DigitalInput backMiddleLimiter;
private DigitalInput frontTopLimiter;
private DigitalInput backTopLimiter;

double elevatorUpSpeed = .2;
double elevatorDownSpeed = -.2;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public Elevator() {

        Front.configFactoryDefault();
        Back.configFactoryDefault();
        Front.configPeakOutputForward(0.5);
        Front.configPeakOutputReverse(-0.5);
        Back.configPeakOutputForward(0.5);
        Back.configPeakOutputReverse(-0.5);
        Front.setInverted(false);
        Back.setInverted(false);

        //- BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
frontBottomLimiter = new DigitalInput(0);
 addChild("FrontBottomLimiter", frontBottomLimiter);
 

backBottomLimiter = new DigitalInput(1);
 addChild("BackBottomLimiter", backBottomLimiter);
 

frontMiddleLimiter = new DigitalInput(2);
 addChild("FrontMiddleLimiter", frontMiddleLimiter);
 

backMiddleLimiter = new DigitalInput(3);
 addChild("BackMiddleLimiter", backMiddleLimiter);
 

frontTopLimiter = new DigitalInput(4);
 addChild("FrontTopLimiter", frontTopLimiter);
 

backTopLimiter = new DigitalInput(5);
 addChild("BackTopLimiter", backTopLimiter);
 


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    public void ElevatorUp(){
        ElevatorFrontOnlyUp();
        ElevatorBackOnlyUp();
    }

    public void ElevatorDown(){
        ElevatorFrontOnlyDown();
        ElevatorBackOnlyDown();
    }

    public void ElevatorStop(){
        Front.set(0);
        Back.set(0);
    }

    public void ElevatorFrontOnlyUp(){
        boolean atTopTrue = frontTopLimiter.get();
        while (!atTopTrue){
            Front.set(elevatorUpSpeed);
        }
        if (atTopTrue){
            Front.set(0);
            return;
        }
    }

    public Boolean ElevatorFrontOnlyDown(){
        boolean atBottomTrue = frontBottomLimiter.get();
        while (!atBottomTrue){
            Front.set(elevatorDownSpeed);
        }
        if (atBottomTrue){
            Front.set(0);
            return true;
        } else{
            return false;
        }
    }

    public void ElevatorBackOnlyUp(){
        boolean atTopTrue = backTopLimiter.get();
        while (!atTopTrue){
            Back.set(elevatorUpSpeed);
        }
        if (atTopTrue){
            Back.set(0);
            return;
        }
    }

    public Boolean ElevatorBackOnlyDown(){
        boolean atBottomTrue = backBottomLimiter.get();
        while (!atBottomTrue){
            Back.set(elevatorDownSpeed);
        }
        if (atBottomTrue){
            Back.set(0);
            return true;
        } else {
            return false;
        }
    }

    public void ElevatorBalance(){
        ElevatorFrontOnlyDown();
        ElevatorBackOnlyDown();
        Front.setSelectedSensorPosition(0);
        Back.setSelectedSensorPosition(0);

        // Front.getSelectedSensorPosition();
        // Front.set(TalonFXControlMode.Position,5);
    }

    public void ElevatorStart(){

    }

    public void ElevatorMidPreset(){

    }



    @Override
    public void periodic() {
        // This method will be called once per scheduler run
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

