// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.


//NOTE FOR OTHER PROGRAMMERS: BOOM iS THE ARM THINGY ON THE ROBOT
package frc.robot.subsystems;

import java.util.ResourceBundle.Control;
import javax.lang.model.util.ElementScanner14;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.DemandType;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.TalonFXControlMode;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;
import frc.robot.commands.*;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import edu.wpi.first.util.sendable.Sendable;
import edu.wpi.first.wpilibj.AnalogInput;
//- BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.motorcontrol.MotorController; 
import edu.wpi.first.wpilibj.motorcontrol.PWMTalonSRX;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Boom extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    AnalogInput input = new AnalogInput(1); 

    AnalogPotentiometer boomPot = new AnalogPotentiometer(1,180,30);
    @Override
    public void addChild(String name, Sendable child) {
        super.addChild("BoomPot", boomPot);
    }
    //addChild("BoomPot",boomPot);
    //- BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private WPI_TalonFX boomMotor;
double boomSpeedIn = .2;
double boomSpeedOut = .2;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public Boom() {
        //- BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
boomMotor = new WPI_TalonFX(0);
 addChild("BoomMotor",boomMotor);
 boomMotor.setInverted(false);



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    DigitalInput boomSwitch = new DigitalInput(8) ;
    addChild("boomSwitch", boomSwitch);
boomMotor.configFactoryDefault();
// boomMotor.configSelectedFeedbackSensor(FeedbackDevice.IntegratedSensor, 0, 0);
// boomMotor.setSensorPhase(false);
// boomMotor.config_kF(0, 0);
// boomMotor.config_kP(0, .1);
// boomMotor.config_kI(0, 0);
// boomMotor.config_kD(0, 0);
// boomMotor.config_IntegralZone(0, 0);
// boomMotor.configClosedLoopPeakOutput(0, 1);
// boomMotor.configAllowableClosedloopError(0, 0, 0);
// boomMotor.setSelectedSensorPosition(0);

    }

    //System.out.println("BOOM_EXTENDING");



    //System.out.println("BOOM_RETRACTING");
public void BoomStop(){
    boomMotor.set(0);
    //System.out.println("BOOM_STOPPED");
}

//THIS IS BOOM PRESETS
public void BoomFullyExtended(){
    while (boomPot.get()!=69) {
        if (boomPot.get()>69){
        boomMotor.set(boomSpeedIn);
    }
        if(boomPot.get()<69){
            boomMotor.set(boomSpeedOut); 
            return;
    }
    }
    // boomMotor.set(ControlMode.MotionMagic, .5);
    // //boomMotor.set(ControlMode.Position, 150.0, DemandType., .4);
    // boomMotor.set(ControlMode.MotionMagic, 150);
    // // boomMotor.set(.4);

}


public void BoomFullyMiddle(){
    while (boomPot.get()!=40) {
        if(boomPot.get()>40){
        boomMotor.set(boomSpeedIn);
    }
        if(boomPot.get()<40){
            boomMotor.set(boomSpeedOut);
    }
    }
    if (boomPot.get()==40) {
        boomMotor.set(0);
        return;
    }
    // boomMotor.getSelectedSensorPosition();
    // boomMotor.set(TalonFXControlMode.MotionMagic,25)   ;
    }



public void BoomFullyRetracted(){
//    boomMotor.set(boomSpeedIn);
//    while (boomSwitch.get()) {
//     boomMotor.set(boomSpeedIn);
//    }
while (boomPot.get()!=0) {
    if(boomPot.get()>0){
    boomMotor.set(boomSpeedIn);
}
    if(boomPot.get()<0){
        boomMotor.set(boomSpeedOut);
}
}
if (boomPot.get()==0) {
    boomMotor.set(0);
    return;
}
 }
    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
}


