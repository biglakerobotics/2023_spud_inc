// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.Constants;
import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.TalonFXControlMode;
import com.ctre.phoenix.motorcontrol.TalonFXFeedbackDevice;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Timer;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Elevator extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    private final WPI_TalonFX Front = new WPI_TalonFX(Constants.ELEVATOR_FRONT_MOTOR_ID);
    private final WPI_TalonFX Back = new WPI_TalonFX(Constants.ELEVATOR_BACK_MOTOR_ID);
    private final Timer timer = new Timer();

    double elevatorUpSpeed = .2;
    double elevatorDownSpeed = -.2;

    public Elevator() {
        Front.configFactoryDefault();
        Front.setNeutralMode(NeutralMode.Brake);
        Back.configFactoryDefault();
        Back.setNeutralMode(NeutralMode.Brake);

        timer.start();
        Front.configSelectedFeedbackSensor(TalonFXFeedbackDevice.IntegratedSensor,0,10);
        Front.getSensorCollection().setIntegratedSensorPosition(0, 0);
        Front.config_kF(0, Constants.ELEVATOR_FRONT_kF); 
        Front.config_kD(0, Constants.ELEVATOR_FRONT_kD); 
        Front.config_kP(0, Constants.ELEVATOR_FRONT_kP); 
        Front.config_kI(0, Constants.ELEVATOR_FRONT_kI); 
        Front.configPeakOutputForward(Constants.peakOutPut, 50); 
        Front.configClosedloopRamp(1);

        Back.configSelectedFeedbackSensor(TalonFXFeedbackDevice.IntegratedSensor,0,10);
        Back.getSensorCollection().setIntegratedSensorPosition(0, 0);
        Back.config_kF(0, Constants.ELEVATOR_BACK_kF); 
        Back.config_kD(0, Constants.ELEVATOR_BACK_kD); 
        Back.config_kP(0, Constants.ELEVATOR_BACK_kP); 
        Back.config_kI(0, Constants.ELEVATOR_BACK_kI); 
        Back.configPeakOutputForward(Constants.peakOutPut, 50); 
        Back.configClosedloopRamp(1);

        Front.configPeakOutputReverse(-0.5);
        Front.configPeakOutputForward(.5);
        Back.configPeakOutputReverse(-0.5);
        Back.configPeakOutputForward(.5);

        Front.setSensorPhase(false);
        Back.setSensorPhase(true);
        Front.setInverted(false);
        Back.setInverted(true);
    }

    public Boolean ElevatorHome(){
        
        if (Front.getStatorCurrent() > 60) {
            System.out.print("\nFront Elevator overcurrent! setting Front Elevator Motor position to Zero");
            Front.set(0);
            Front.setSelectedSensorPosition(-750);
            return true;
        } else {
            System.out.print("\nFront Elevator Motor current: ");
            System.out.print(Front.getStatorCurrent());
            System.out.print(" - Front Elevator Motor position: ");
            System.out.print(Front.getSelectedSensorPosition());
            Front.set(elevatorDownSpeed);
            return false;
        }
    }

    public void ElevatorUp(){
        ElevatorFrontOnlyUp(); 
        ElevatorBackOnlyUp();
    }

    public void ElevatorDown(){
        ElevatorFrontOnlyDown();
        ElevatorBackOnlyDown();
    }

    public void ElevatorStop(){
        // Front.set(TalonFXControlMode.Position, Front.getSensorCollection().getIntegratedSensorPosition());
        // Back.set(TalonFXControlMode.Position, Back.getSensorCollection().getIntegratedSensorPosition());
        Front.set(0);
        Back.set(0);
    }

    public void ElevatorFrontOnlyUp(){
        if (timer.hasElapsed(1)) {
            Front.set(TalonFXControlMode.Position, Constants.ELEVATOR_TOP_HEIGHT_PRESET);
        }
    }

    public void ElevatorFrontOnlyDown(){
        if (timer.hasElapsed(1)) {
            if (Front.getSensorCollection().getIntegratedSensorPosition() > 7000) {
                Front.set(elevatorDownSpeed);
            } else {
                Front.set(TalonFXControlMode.Position, Constants.ELEVATOR_LOW_HEIGHT_PRESET);
            }
        }
    }

    public void ElevatorBackOnlyUp(){
        if (timer.hasElapsed(1)) {
            System.out.print("\nBack pos: ");
            System.out.print(Back.getSensorCollection().getIntegratedSensorPosition());
            Back.set(TalonFXControlMode.Position, Constants.ELEVATOR_TOP_HEIGHT_PRESET);
        }
    }

    public void ElevatorBackOnlyDown(){
        if (timer.hasElapsed(1)) {
            System.out.print("\nBack pos: ");
            System.out.print(Back.getSensorCollection().getIntegratedSensorPosition());
            if (Back.getSensorCollection().getIntegratedSensorPosition() > 7000) {
                Back.set(elevatorDownSpeed);
            } else {
                Back.set(TalonFXControlMode.Position, Constants.ELEVATOR_LOW_HEIGHT_PRESET);
            }
         }
    }

    public void ElevatorBalance(){
        if (timer.hasElapsed(1)) {

        }
    }


    public void ElevatorStart(){                   //note to future programmers, CHANGE THESE NUMBERS!!!!
        if (timer.hasElapsed(1)) {
            if (Back.getSensorCollection().getIntegratedSensorPosition() < -990 || Back.getSensorCollection().getIntegratedSensorPosition() < -1010) {
               if (Back.getSensorCollection().getIntegratedSensorPosition() < -990){
                   Back.set(elevatorDownSpeed);
               }
               if (Back.getSensorCollection().getIntegratedSensorPosition() > -1010){
                   Back.set(elevatorUpSpeed);
               }
            }else{
               Back.set(0);
            }
            if (Front.getSensorCollection().getIntegratedSensorPosition() < 1010 || Front.getSensorCollection().getIntegratedSensorPosition() > 990) {
                if(Front.getSensorCollection().getIntegratedSensorPosition() < 1000){
                   Front.set(elevatorUpSpeed);
                }
                if(Front.getSensorCollection().getIntegratedSensorPosition() > 1000){
                   Front.set(elevatorDownSpeed);
                }
            } else {
                Front.set(0);
            }
        }
    }

    public void ElevatorMidPreset(){
        if (timer.hasElapsed(1)) {
            System.out.print("\nMid Elevator Preset");
            System.out.print("\nFront Elevator pos: ");
            System.out.print(Front.getSensorCollection().getIntegratedSensorPosition());
            System.out.print("\nBack Elevator pos: ");
            System.out.print(Back.getSensorCollection().getIntegratedSensorPosition());
            Front.set(TalonFXControlMode.Position, Constants.ELEVATOR_MID_HEIGHT_PRESET);
            Back.set(TalonFXControlMode.Position, Constants.ELEVATOR_MID_HEIGHT_PRESET);
        }
    }

    public void ElevatorPickUpPreset(){
        if (timer.hasElapsed(1)) {
            System.out.print("\nPick Up Elevator Preset");
            Front.set(TalonFXControlMode.Position, Constants.ELEVATOR_PICKUP_PRESET_FRONT);
            Back.set(TalonFXControlMode.Position, Constants.ELEVATOR_PICKUP_PRESET_BACK);
        }
    }

    public void ElevatorHighPreset(){
        if (timer.hasElapsed(1)) {
            System.out.print("\nHigh Elevator Preset");
            Front.set(TalonFXControlMode.Position, Constants.ELEVATOR_TOP_HEIGHT_PRESET);
            Back.set(TalonFXControlMode.Position, Constants.ELEVATOR_MID_PRESET_BACK);
        }
    }

    public void ElevatorLowPreset(){
        if (timer.hasElapsed(1)) {
            System.out.print("\nLow Elevator Preset");
            Front.set(TalonFXControlMode.Position, Constants.ELEVATOR_LOW_HEIGHT_PRESET);
            Back.set(TalonFXControlMode.Position, Constants.ELEVATOR_LOW_HEIGHT_PRESET);
        }
    }



    @Override
    public void periodic() {
        // This method will be called once per scheduler run
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}